# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from codefresh_client.api_client import ApiClient


class RuntimeEnvironmentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def runtime_envs_delete(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_delete(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :param str force: Force
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.runtime_envs_delete_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
        else:
            (data) = self.runtime_envs_delete_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
            return data

    def runtime_envs_delete_with_http_info(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_delete_with_http_info(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :param str force: Force
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['runtime_environment_name', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runtime_envs_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'runtime_environment_name' is set
        if ('runtime_environment_name' not in local_var_params or
                local_var_params['runtime_environment_name'] is None):
            raise ValueError("Missing the required parameter `runtime_environment_name` when calling `runtime_envs_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'runtime_environment_name' in local_var_params:
            path_params['runtimeEnvironmentName'] = local_var_params['runtime_environment_name']  # noqa: E501

        query_params = []
        if 'force' in local_var_params:
            query_params.append(('force', local_var_params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/runtime-environments/{runtimeEnvironmentName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runtime_envs_get(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_get(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :param str version: Version
        :param str extend: Extend
        :param str history: History
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.runtime_envs_get_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
        else:
            (data) = self.runtime_envs_get_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
            return data

    def runtime_envs_get_with_http_info(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_get_with_http_info(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :param str version: Version
        :param str extend: Extend
        :param str history: History
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['runtime_environment_name', 'version', 'extend', 'history']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runtime_envs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'runtime_environment_name' is set
        if ('runtime_environment_name' not in local_var_params or
                local_var_params['runtime_environment_name'] is None):
            raise ValueError("Missing the required parameter `runtime_environment_name` when calling `runtime_envs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'runtime_environment_name' in local_var_params:
            path_params['runtimeEnvironmentName'] = local_var_params['runtime_environment_name']  # noqa: E501

        query_params = []
        if 'version' in local_var_params:
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'extend' in local_var_params:
            query_params.append(('extend', local_var_params['extend']))  # noqa: E501
        if 'history' in local_var_params:
            query_params.append(('history', local_var_params['history']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/runtime-environments/{runtimeEnvironmentName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runtime_envs_list(self, **kwargs):  # noqa: E501
        """List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Limit
        :param str offset: Offset
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.runtime_envs_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.runtime_envs_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def runtime_envs_list_with_http_info(self, **kwargs):  # noqa: E501
        """List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Limit
        :param str offset: Offset
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runtime_envs_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/runtime-environments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runtime_envs_set_default(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Set default  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_set_default(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.runtime_envs_set_default_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
        else:
            (data) = self.runtime_envs_set_default_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
            return data

    def runtime_envs_set_default_with_http_info(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Set default  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_set_default_with_http_info(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['runtime_environment_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runtime_envs_set_default" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'runtime_environment_name' is set
        if ('runtime_environment_name' not in local_var_params or
                local_var_params['runtime_environment_name'] is None):
            raise ValueError("Missing the required parameter `runtime_environment_name` when calling `runtime_envs_set_default`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'runtime_environment_name' in local_var_params:
            path_params['runtimeEnvironmentName'] = local_var_params['runtime_environment_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/runtime-environments/default/{runtimeEnvironmentName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runtime_envs_update(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_update(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :param str extend: Extend
        :param str description: Description
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.runtime_envs_update_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
        else:
            (data) = self.runtime_envs_update_with_http_info(runtime_environment_name, **kwargs)  # noqa: E501
            return data

    def runtime_envs_update_with_http_info(self, runtime_environment_name, **kwargs):  # noqa: E501
        """Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runtime_envs_update_with_http_info(runtime_environment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runtime_environment_name: Runtime environment name (required)
        :param str extend: Extend
        :param str description: Description
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['runtime_environment_name', 'extend', 'description', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runtime_envs_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'runtime_environment_name' is set
        if ('runtime_environment_name' not in local_var_params or
                local_var_params['runtime_environment_name'] is None):
            raise ValueError("Missing the required parameter `runtime_environment_name` when calling `runtime_envs_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'runtime_environment_name' in local_var_params:
            path_params['runtimeEnvironmentName'] = local_var_params['runtime_environment_name']  # noqa: E501

        query_params = []
        if 'extend' in local_var_params:
            query_params.append(('extend', local_var_params['extend']))  # noqa: E501
        if 'description' in local_var_params:
            query_params.append(('description', local_var_params['description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/runtime-environments/{runtimeEnvironmentName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
