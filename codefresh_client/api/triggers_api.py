# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from codefresh_client.api_client import ApiClient


class TriggersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def triggers_create(self, event, pipeline, **kwargs):  # noqa: E501
        """Create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_create(event, pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event (required)
        :param str pipeline: Pipeline (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.triggers_create_with_http_info(event, pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.triggers_create_with_http_info(event, pipeline, **kwargs)  # noqa: E501
            return data

    def triggers_create_with_http_info(self, event, pipeline, **kwargs):  # noqa: E501
        """Create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_create_with_http_info(event, pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event (required)
        :param str pipeline: Pipeline (required)
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event', 'pipeline', 'unknown_base_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triggers_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event' is set
        if ('event' not in local_var_params or
                local_var_params['event'] is None):
            raise ValueError("Missing the required parameter `event` when calling `triggers_create`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in local_var_params or
                local_var_params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `triggers_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event' in local_var_params:
            path_params['event'] = local_var_params['event']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/hermes/triggers/{event}/{pipeline}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def triggers_delete(self, event, pipeline, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_delete(event, pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event (required)
        :param str pipeline: Pipeline (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.triggers_delete_with_http_info(event, pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.triggers_delete_with_http_info(event, pipeline, **kwargs)  # noqa: E501
            return data

    def triggers_delete_with_http_info(self, event, pipeline, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_delete_with_http_info(event, pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event (required)
        :param str pipeline: Pipeline (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event', 'pipeline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triggers_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event' is set
        if ('event' not in local_var_params or
                local_var_params['event'] is None):
            raise ValueError("Missing the required parameter `event` when calling `triggers_delete`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in local_var_params or
                local_var_params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `triggers_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event' in local_var_params:
            path_params['event'] = local_var_params['event']  # noqa: E501
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/hermes/triggers/{event}/{pipeline}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def triggers_get_event_triggers(self, event, **kwargs):  # noqa: E501
        """Get event triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_get_event_triggers(event, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.triggers_get_event_triggers_with_http_info(event, **kwargs)  # noqa: E501
        else:
            (data) = self.triggers_get_event_triggers_with_http_info(event, **kwargs)  # noqa: E501
            return data

    def triggers_get_event_triggers_with_http_info(self, event, **kwargs):  # noqa: E501
        """Get event triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_get_event_triggers_with_http_info(event, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event: Event (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triggers_get_event_triggers" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event' is set
        if ('event' not in local_var_params or
                local_var_params['event'] is None):
            raise ValueError("Missing the required parameter `event` when calling `triggers_get_event_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event' in local_var_params:
            path_params['event'] = local_var_params['event']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/hermes/triggers/event/{event}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def triggers_get_pipeline_triggers(self, pipeline, **kwargs):  # noqa: E501
        """Get pipeline triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_get_pipeline_triggers(pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline: Pipeline (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.triggers_get_pipeline_triggers_with_http_info(pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.triggers_get_pipeline_triggers_with_http_info(pipeline, **kwargs)  # noqa: E501
            return data

    def triggers_get_pipeline_triggers_with_http_info(self, pipeline, **kwargs):  # noqa: E501
        """Get pipeline triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_get_pipeline_triggers_with_http_info(pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline: Pipeline (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pipeline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triggers_get_pipeline_triggers" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in local_var_params or
                local_var_params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `triggers_get_pipeline_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline' in local_var_params:
            path_params['pipeline'] = local_var_params['pipeline']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/hermes/triggers/pipeline/{pipeline}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def triggers_list(self, **kwargs):  # noqa: E501
        """List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.triggers_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.triggers_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def triggers_list_with_http_info(self, **kwargs):  # noqa: E501
        """List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.triggers_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method triggers_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/hermes/triggers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
