# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from codefresh_client.api_client import ApiClient


class ImagesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def images_add_from_external_source(self, **kwargs):  # noqa: E501
        """Add from external source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_add_from_external_source(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_add_from_external_source_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.images_add_from_external_source_with_http_info(**kwargs)  # noqa: E501
            return data

    def images_add_from_external_source_with_http_info(self, **kwargs):  # noqa: E501
        """Add from external source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_add_from_external_source_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_add_from_external_source" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/external', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_delete_metadata(self, docker_image_id, key_name, **kwargs):  # noqa: E501
        """Delete metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_delete_metadata(docker_image_id, key_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str docker_image_id: id of the Image from docker inspect (required)
        :param str key_name: name of the metadata key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_delete_metadata_with_http_info(docker_image_id, key_name, **kwargs)  # noqa: E501
        else:
            (data) = self.images_delete_metadata_with_http_info(docker_image_id, key_name, **kwargs)  # noqa: E501
            return data

    def images_delete_metadata_with_http_info(self, docker_image_id, key_name, **kwargs):  # noqa: E501
        """Delete metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_delete_metadata_with_http_info(docker_image_id, key_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str docker_image_id: id of the Image from docker inspect (required)
        :param str key_name: name of the metadata key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['docker_image_id', 'key_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_delete_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'docker_image_id' is set
        if ('docker_image_id' not in local_var_params or
                local_var_params['docker_image_id'] is None):
            raise ValueError("Missing the required parameter `docker_image_id` when calling `images_delete_metadata`")  # noqa: E501
        # verify the required parameter 'key_name' is set
        if ('key_name' not in local_var_params or
                local_var_params['key_name'] is None):
            raise ValueError("Missing the required parameter `key_name` when calling `images_delete_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'docker_image_id' in local_var_params:
            path_params['dockerImageId'] = local_var_params['docker_image_id']  # noqa: E501
        if 'key_name' in local_var_params:
            path_params['keyName'] = local_var_params['key_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/{dockerImageId}/metadata/{keyName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_get(self, id, **kwargs):  # noqa: E501
        """Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the Image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.images_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def images_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id of the Image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `images_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_get_metadata(self, docker_image_id, **kwargs):  # noqa: E501
        """Get metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_get_metadata(docker_image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str docker_image_id: id of the Image (from docker inspect) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_get_metadata_with_http_info(docker_image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.images_get_metadata_with_http_info(docker_image_id, **kwargs)  # noqa: E501
            return data

    def images_get_metadata_with_http_info(self, docker_image_id, **kwargs):  # noqa: E501
        """Get metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_get_metadata_with_http_info(docker_image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str docker_image_id: id of the Image (from docker inspect) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['docker_image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_get_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'docker_image_id' is set
        if ('docker_image_id' not in local_var_params or
                local_var_params['docker_image_id'] is None):
            raise ValueError("Missing the required parameter `docker_image_id` when calling `images_get_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'docker_image_id' in local_var_params:
            path_params['dockerImageId'] = local_var_params['docker_image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/{dockerImageId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_get_tags(self, id, **kwargs):  # noqa: E501
        """Get tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_get_tags(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: name of the image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_get_tags_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.images_get_tags_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def images_get_tags_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_get_tags_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: name of the image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_get_tags" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `images_get_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_list(self, **kwargs):  # noqa: E501
        """List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit:
        :param str offset:
        :param str metadata:
        :param str tag:
        :param str type:
        :param str branch:
        :param str image_display_name_regex:
        :param str select:
        :param str sha:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.images_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def images_list_with_http_info(self, **kwargs):  # noqa: E501
        """List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit:
        :param str offset:
        :param str metadata:
        :param str tag:
        :param str type:
        :param str branch:
        :param str image_display_name_regex:
        :param str select:
        :param str sha:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['limit', 'offset', 'metadata', 'tag', 'type', 'branch', 'image_display_name_regex', 'select', 'sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'metadata' in local_var_params:
            query_params.append(('metadata', local_var_params['metadata']))  # noqa: E501
        if 'tag' in local_var_params:
            query_params.append(('tag', local_var_params['tag']))  # noqa: E501
        if 'type' in local_var_params:
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'branch' in local_var_params:
            query_params.append(('branch', local_var_params['branch']))  # noqa: E501
        if 'image_display_name_regex' in local_var_params:
            query_params.append(('imageDisplayNameRegex', local_var_params['image_display_name_regex']))  # noqa: E501
        if 'select' in local_var_params:
            query_params.append(('select', local_var_params['select']))  # noqa: E501
        if 'sha' in local_var_params:
            query_params.append(('sha', local_var_params['sha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_tag(self, id, tag, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_tag(id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: image ObjectId (required)
        :param str tag: tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_tag_with_http_info(id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.images_tag_with_http_info(id, tag, **kwargs)  # noqa: E501
            return data

    def images_tag_with_http_info(self, id, tag, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_tag_with_http_info(id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: image ObjectId (required)
        :param str tag: tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `images_tag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in local_var_params or
                local_var_params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `images_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tag' in local_var_params:
            path_params['tag'] = local_var_params['tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/{id}/tag/{tag}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_untag(self, id, tag, **kwargs):  # noqa: E501
        """Untag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_untag(id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: image ObjectId (required)
        :param str tag: tag ObjectId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_untag_with_http_info(id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.images_untag_with_http_info(id, tag, **kwargs)  # noqa: E501
            return data

    def images_untag_with_http_info(self, id, tag, **kwargs):  # noqa: E501
        """Untag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_untag_with_http_info(id, tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: image ObjectId (required)
        :param str tag: tag ObjectId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_untag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `images_untag`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in local_var_params or
                local_var_params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `images_untag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tag' in local_var_params:
            path_params['tag'] = local_var_params['tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/{id}/tag/{tag}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def images_upsert_metadata(self, docker_image_id, **kwargs):  # noqa: E501
        """Upsert metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_upsert_metadata(docker_image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str docker_image_id: id of the Image (from docker inspect) (required)
        :param InlineObject24 inline_object24:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.images_upsert_metadata_with_http_info(docker_image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.images_upsert_metadata_with_http_info(docker_image_id, **kwargs)  # noqa: E501
            return data

    def images_upsert_metadata_with_http_info(self, docker_image_id, **kwargs):  # noqa: E501
        """Upsert metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.images_upsert_metadata_with_http_info(docker_image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str docker_image_id: id of the Image (from docker inspect) (required)
        :param InlineObject24 inline_object24:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['docker_image_id', 'inline_object24']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_upsert_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'docker_image_id' is set
        if ('docker_image_id' not in local_var_params or
                local_var_params['docker_image_id'] is None):
            raise ValueError("Missing the required parameter `docker_image_id` when calling `images_upsert_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'docker_image_id' in local_var_params:
            path_params['dockerImageId'] = local_var_params['docker_image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object24' in local_var_params:
            body_params = local_var_params['inline_object24']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/images/{dockerImageId}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
