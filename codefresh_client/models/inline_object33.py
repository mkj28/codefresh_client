# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject33(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_account': 'object',
        'logins': 'object',
        'key': 'object'
    }

    attribute_map = {
        'active_account': 'activeAccount',
        'logins': 'logins',
        'key': 'key'
    }

    def __init__(self, active_account=None, logins=None, key=None):  # noqa: E501
        """InlineObject33 - a model defined in OpenAPI"""  # noqa: E501

        self._active_account = None
        self._logins = None
        self._key = None
        self.discriminator = None

        if active_account is not None:
            self.active_account = active_account
        if logins is not None:
            self.logins = logins
        if key is not None:
            self.key = key

    @property
    def active_account(self):
        """Gets the active_account of this InlineObject33.  # noqa: E501


        :return: The active_account of this InlineObject33.  # noqa: E501
        :rtype: object
        """
        return self._active_account

    @active_account.setter
    def active_account(self, active_account):
        """Sets the active_account of this InlineObject33.


        :param active_account: The active_account of this InlineObject33.  # noqa: E501
        :type: object
        """

        self._active_account = active_account

    @property
    def logins(self):
        """Gets the logins of this InlineObject33.  # noqa: E501


        :return: The logins of this InlineObject33.  # noqa: E501
        :rtype: object
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this InlineObject33.


        :param logins: The logins of this InlineObject33.  # noqa: E501
        :type: object
        """

        self._logins = logins

    @property
    def key(self):
        """Gets the key of this InlineObject33.  # noqa: E501


        :return: The key of this InlineObject33.  # noqa: E501
        :rtype: object
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineObject33.


        :param key: The key of this InlineObject33.  # noqa: E501
        :type: object
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject33):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
