# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject30(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'branch': 'str',
        'repo_data': 'RuntimetestitRepoData',
        'repo_name': 'str',
        'repo_owner': 'str',
        'service_id': 'str',
        'sha': 'str'
    }

    attribute_map = {
        'branch': 'branch',
        'repo_data': 'repoData',
        'repo_name': 'repoName',
        'repo_owner': 'repoOwner',
        'service_id': 'serviceId',
        'sha': 'sha'
    }

    def __init__(self, branch=None, repo_data=None, repo_name=None, repo_owner=None, service_id=None, sha=None):  # noqa: E501
        """InlineObject30 - a model defined in OpenAPI"""  # noqa: E501

        self._branch = None
        self._repo_data = None
        self._repo_name = None
        self._repo_owner = None
        self._service_id = None
        self._sha = None
        self.discriminator = None

        if branch is not None:
            self.branch = branch
        if repo_data is not None:
            self.repo_data = repo_data
        if repo_name is not None:
            self.repo_name = repo_name
        if repo_owner is not None:
            self.repo_owner = repo_owner
        if service_id is not None:
            self.service_id = service_id
        if sha is not None:
            self.sha = sha

    @property
    def branch(self):
        """Gets the branch of this InlineObject30.  # noqa: E501


        :return: The branch of this InlineObject30.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this InlineObject30.


        :param branch: The branch of this InlineObject30.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def repo_data(self):
        """Gets the repo_data of this InlineObject30.  # noqa: E501


        :return: The repo_data of this InlineObject30.  # noqa: E501
        :rtype: RuntimetestitRepoData
        """
        return self._repo_data

    @repo_data.setter
    def repo_data(self, repo_data):
        """Sets the repo_data of this InlineObject30.


        :param repo_data: The repo_data of this InlineObject30.  # noqa: E501
        :type: RuntimetestitRepoData
        """

        self._repo_data = repo_data

    @property
    def repo_name(self):
        """Gets the repo_name of this InlineObject30.  # noqa: E501


        :return: The repo_name of this InlineObject30.  # noqa: E501
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this InlineObject30.


        :param repo_name: The repo_name of this InlineObject30.  # noqa: E501
        :type: str
        """

        self._repo_name = repo_name

    @property
    def repo_owner(self):
        """Gets the repo_owner of this InlineObject30.  # noqa: E501


        :return: The repo_owner of this InlineObject30.  # noqa: E501
        :rtype: str
        """
        return self._repo_owner

    @repo_owner.setter
    def repo_owner(self, repo_owner):
        """Sets the repo_owner of this InlineObject30.


        :param repo_owner: The repo_owner of this InlineObject30.  # noqa: E501
        :type: str
        """

        self._repo_owner = repo_owner

    @property
    def service_id(self):
        """Gets the service_id of this InlineObject30.  # noqa: E501


        :return: The service_id of this InlineObject30.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this InlineObject30.


        :param service_id: The service_id of this InlineObject30.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def sha(self):
        """Gets the sha of this InlineObject30.  # noqa: E501


        :return: The sha of this InlineObject30.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this InlineObject30.


        :param sha: The sha of this InlineObject30.  # noqa: E501
        :type: str
        """

        self._sha = sha

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject30):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
