# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject12(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_advanced': 'bool',
        'name': 'str',
        'vars': 'list[str]',
        'yaml_json': 'str'
    }

    attribute_map = {
        'is_advanced': 'isAdvanced',
        'name': 'name',
        'vars': 'vars',
        'yaml_json': 'yamlJson'
    }

    def __init__(self, is_advanced=None, name=None, vars=None, yaml_json=None):  # noqa: E501
        """InlineObject12 - a model defined in OpenAPI"""  # noqa: E501

        self._is_advanced = None
        self._name = None
        self._vars = None
        self._yaml_json = None
        self.discriminator = None

        if is_advanced is not None:
            self.is_advanced = is_advanced
        if name is not None:
            self.name = name
        if vars is not None:
            self.vars = vars
        if yaml_json is not None:
            self.yaml_json = yaml_json

    @property
    def is_advanced(self):
        """Gets the is_advanced of this InlineObject12.  # noqa: E501


        :return: The is_advanced of this InlineObject12.  # noqa: E501
        :rtype: bool
        """
        return self._is_advanced

    @is_advanced.setter
    def is_advanced(self, is_advanced):
        """Sets the is_advanced of this InlineObject12.


        :param is_advanced: The is_advanced of this InlineObject12.  # noqa: E501
        :type: bool
        """

        self._is_advanced = is_advanced

    @property
    def name(self):
        """Gets the name of this InlineObject12.  # noqa: E501


        :return: The name of this InlineObject12.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject12.


        :param name: The name of this InlineObject12.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vars(self):
        """Gets the vars of this InlineObject12.  # noqa: E501


        :return: The vars of this InlineObject12.  # noqa: E501
        :rtype: list[str]
        """
        return self._vars

    @vars.setter
    def vars(self, vars):
        """Sets the vars of this InlineObject12.


        :param vars: The vars of this InlineObject12.  # noqa: E501
        :type: list[str]
        """

        self._vars = vars

    @property
    def yaml_json(self):
        """Gets the yaml_json of this InlineObject12.  # noqa: E501


        :return: The yaml_json of this InlineObject12.  # noqa: E501
        :rtype: str
        """
        return self._yaml_json

    @yaml_json.setter
    def yaml_json(self, yaml_json):
        """Sets the yaml_json of this InlineObject12.


        :param yaml_json: The yaml_json of this InlineObject12.  # noqa: E501
        :type: str
        """

        self._yaml_json = yaml_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject12):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
