# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject29(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'password': 'str',
        'domain': 'str',
        'name': 'str',
        'behind_firewall': 'str'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'domain': 'domain',
        'name': 'name',
        'behind_firewall': 'behindFirewall'
    }

    def __init__(self, username=None, password=None, domain=None, name=None, behind_firewall=None):  # noqa: E501
        """InlineObject29 - a model defined in OpenAPI"""  # noqa: E501

        self._username = None
        self._password = None
        self._domain = None
        self._name = None
        self._behind_firewall = None
        self.discriminator = None

        self.username = username
        self.password = password
        self.domain = domain
        self.name = name
        if behind_firewall is not None:
            self.behind_firewall = behind_firewall

    @property
    def username(self):
        """Gets the username of this InlineObject29.  # noqa: E501


        :return: The username of this InlineObject29.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineObject29.


        :param username: The username of this InlineObject29.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this InlineObject29.  # noqa: E501


        :return: The password of this InlineObject29.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this InlineObject29.


        :param password: The password of this InlineObject29.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def domain(self):
        """Gets the domain of this InlineObject29.  # noqa: E501


        :return: The domain of this InlineObject29.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this InlineObject29.


        :param domain: The domain of this InlineObject29.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def name(self):
        """Gets the name of this InlineObject29.  # noqa: E501


        :return: The name of this InlineObject29.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject29.


        :param name: The name of this InlineObject29.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def behind_firewall(self):
        """Gets the behind_firewall of this InlineObject29.  # noqa: E501


        :return: The behind_firewall of this InlineObject29.  # noqa: E501
        :rtype: str
        """
        return self._behind_firewall

    @behind_firewall.setter
    def behind_firewall(self, behind_firewall):
        """Sets the behind_firewall of this InlineObject29.


        :param behind_firewall: The behind_firewall of this InlineObject29.  # noqa: E501
        :type: str
        """

        self._behind_firewall = behind_firewall

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject29):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
