# coding: utf-8

"""
    Codefresh API

    Codefresh API openAPI 3.0 specification  # noqa: E501

    OpenAPI spec version: 0.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Abac(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'teams': 'list[str]',
        'actions': 'list[str]',
        'resource': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'teams': 'teams',
        'actions': 'actions',
        'resource': 'resource',
        'tags': 'tags'
    }

    def __init__(self, teams=None, actions=None, resource=None, tags=None):  # noqa: E501
        """Abac - a model defined in OpenAPI"""  # noqa: E501

        self._teams = None
        self._actions = None
        self._resource = None
        self._tags = None
        self.discriminator = None

        if teams is not None:
            self.teams = teams
        if actions is not None:
            self.actions = actions
        if resource is not None:
            self.resource = resource
        if tags is not None:
            self.tags = tags

    @property
    def teams(self):
        """Gets the teams of this Abac.  # noqa: E501


        :return: The teams of this Abac.  # noqa: E501
        :rtype: list[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this Abac.


        :param teams: The teams of this Abac.  # noqa: E501
        :type: list[str]
        """

        self._teams = teams

    @property
    def actions(self):
        """Gets the actions of this Abac.  # noqa: E501


        :return: The actions of this Abac.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Abac.


        :param actions: The actions of this Abac.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def resource(self):
        """Gets the resource of this Abac.  # noqa: E501


        :return: The resource of this Abac.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Abac.


        :param resource: The resource of this Abac.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def tags(self):
        """Gets the tags of this Abac.  # noqa: E501


        :return: The tags of this Abac.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Abac.


        :param tags: The tags of this Abac.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Abac):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
